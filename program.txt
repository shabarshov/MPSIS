reg_file[1] <- 15 // first value // 0000001111
reg_file[2] <- sw_i // second value // 100001000 это 0108 в 16

reg_file[1] <- reg_file[1] XOR reg_file[2]
reg_file[2] <- -1 // output counter

reg_file[3] <- 1 // one for operations
reg_file[4] <- -1 // zero for loop
reg_file[5] <- 23 // 23 for loop
reg_file[6] <- 1 // one for <<
reg_file[7] <- 0 // for condition

reg_file[2] <- reg_file[2] + reg_file[3]
reg_file[4] <- reg_file[4] + reg_file[3]
reg_file[6] <- reg_file[6] << reg_file[3]
reg_file[8] <- reg_file[6] & reg_file[1]

if (reg_file[5] < reg_file[4])
	PC <- PC + 3

if(reg_file[7] < reg_file[8])
	PC <- PC - 5

if (reg_file[4] < reg_file[5])
	PC <- PC – 5

reg_file[6] <- 1
reg_file[8] <- reg_file[8] <- reg_file[6] & reg_file[1]

if(reg_file[7] < reg_file[8])
	PC <- PC + 2


out_o = reg_file[2], PC <- PC + 0

reg_file[2] <- reg_file[2] + reg_file[3]
out_o = reg_file[2], PC <- PC + 0

////////////////////////////////////////////////////////////////////////////

0 0 00 00000000000000000001111 00001
0 0 10 00000000000000000000000 00010

0 0 01 00100 00001 00010 00000000 00001 // XOR
0 0 00 11111111111111111111111 00010 // -1 for output count

0 0 00 00000000000000000000001 00011 // 1 for operations
0 0 00 11111111111111111111111 00100 // 0 for loop
0 0 00 00000000000000000010111 00101 // 23
0 0 00 00000000000000000000001 00110 // 1 for <<
0 0 00 00000000000000000000000 00111 // 0 for condition

0 0 01 00000 00010 00011 00000000 00010 // outputCounter ++
0 0 01 00000 00100 00011 00000000 00100 // stepCounter ++
0 0 01 00001 00110 00011 00000000 00110 // << operation
0 0 01 00111 00110 00001 00000000 01000 // & operation

0 1 00 11110 00101 00100 00000011 00000 // condition && goto end

0 1 00 11110 00111 01000 11111011 00000 // condition && PC -= 1

0 1 00 11110 00100 00101 11111011 00000 // condition && PC -= 1

0 0 00 00000000000000000000001 00110 // 1 for <<
0 0 01 00111 00110 00001 00000000 01000
0 1 00 11110 00111 01000 00000010 00000 // condition && PC -= 1


1 0 00 00000 00010 00000 00000000 00000

0 0 01 00000 00010 00011 00000000 00010 // outputCounter ++
1 0 00 00000 00010 00000 00000000 00000

////////////////////////////////////////////////////

000 0000 0000 0000 0000 1111
000 0000 0000 0001 0000 1000
000 0000 0000 0001 0000 0111
result = 19

////////////////////////////////////////////////////
